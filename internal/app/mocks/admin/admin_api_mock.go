// Code generated by MockGen. DO NOT EDIT.
// Source: app.go

// Package admin is a generated GoMock package.
package mock_admin

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAdminApi is a mock of AdminApi interface.
type MockAdminApi struct {
	ctrl     *gomock.Controller
	recorder *MockAdminApiMockRecorder
}

// MockAdminApiMockRecorder is the mock recorder for MockAdminApi.
type MockAdminApiMockRecorder struct {
	mock *MockAdminApi
}

// NewMockAdminApi creates a new mock instance.
func NewMockAdminApi(ctrl *gomock.Controller) *MockAdminApi {
	mock := &MockAdminApi{ctrl: ctrl}
	mock.recorder = &MockAdminApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminApi) EXPECT() *MockAdminApiMockRecorder {
	return m.recorder
}

// RegisterRoutes mocks base method.
func (m *MockAdminApi) RegisterRoutes() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterRoutes")
}

// RegisterRoutes indicates an expected call of RegisterRoutes.
func (mr *MockAdminApiMockRecorder) RegisterRoutes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterRoutes", reflect.TypeOf((*MockAdminApi)(nil).RegisterRoutes))
}

// Run mocks base method.
func (m *MockAdminApi) Run(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockAdminApiMockRecorder) Run(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockAdminApi)(nil).Run), ctx)
}

// Stop mocks base method.
func (m *MockAdminApi) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockAdminApiMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockAdminApi)(nil).Stop))
}

// MockgrpcApp is a mock of grpcApp interface.
type MockgrpcApp struct {
	ctrl     *gomock.Controller
	recorder *MockgrpcAppMockRecorder
}

// MockgrpcAppMockRecorder is the mock recorder for MockgrpcApp.
type MockgrpcAppMockRecorder struct {
	mock *MockgrpcApp
}

// NewMockgrpcApp creates a new mock instance.
func NewMockgrpcApp(ctrl *gomock.Controller) *MockgrpcApp {
	mock := &MockgrpcApp{ctrl: ctrl}
	mock.recorder = &MockgrpcAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockgrpcApp) EXPECT() *MockgrpcAppMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockgrpcApp) Run(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockgrpcAppMockRecorder) Run(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockgrpcApp)(nil).Run), ctx)
}

// Stop mocks base method.
func (m *MockgrpcApp) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockgrpcAppMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockgrpcApp)(nil).Stop))
}
